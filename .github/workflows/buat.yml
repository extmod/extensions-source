name: Build single Tachiyomi extension (Debug APK)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      extension:
        description: 'Nama modul Gradle ekstensi (contoh: extension-mihon atau mihon)'
        required: true
        default: 'extension-mihon'

env:
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

jobs:
  build-debug:
    name: Build debug APK for single extension
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine extension to build
        id: set_ext
        run: |
          INPUT_EXT="${{ github.event.inputs.extension }}"
          # sanitize remove surrounding colons/spaces
          CHOSEN="$(echo "$INPUT_EXT" | sed 's/^[:] *//; s/ *[:]$//; s/^[[:space:]]*//; s/[[:space:]]*$//')"
          echo "Selected extension module: '$CHOSEN'"
          echo "EXT_MODULE=$CHOSEN" >> $GITHUB_ENV

      - name: Validate extension exists
        id: validate
        run: |
          set -e
          # Try 2 checks: 1) folder exists, 2) settings.gradle references module
          M=$EXT_MODULE
          # allow module prefixed with colon like ":extension-mihon"
          M_STRIPPED=$(echo "$M" | sed 's/^[:]//')
          echo "Checking for module folder or include in settings for '$M' / '$M_STRIPPED'..."
          FOUND=0
          if [ -d "./$M_STRIPPED" ]; then
            echo "Found directory ./$M_STRIPPED"
            FOUND=1
          fi
          # check settings.gradle* for ':module' or "module" entry
          if grep -R --line-number --fixed-strings ":$M_STRIPPED" settings.gradle* >/dev/null 2>&1; then
            echo "Found include in settings.gradle for :$M_STRIPPED"
            FOUND=1
          fi
          if grep -R --line-number --fixed-strings "$M_STRIPPED" settings.gradle* >/dev/null 2>&1; then
            echo "Found mention of $M_STRIPPED in settings.gradle*"
            FOUND=1
          fi
          if [ "$FOUND" -eq 0 ]; then
            echo "ERROR: Modul '$M' tidak ditemukan (cek nama modul atau struktur repo)." >&2
            exit 1
          fi

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK (cmdline tools + platform-tools)
        uses: android-actions/setup-android@v3
        with:
          packages: "platform-tools build-tools;33.0.2 platforms;android-33"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure Gradle wrapper is executable
        run: chmod +x ./gradlew

      - name: Build debug APK (assembleDebug)
        id: gradle_build
        run: |
          # Use sanitized module (strip leading colon if present)
          M="${EXT_MODULE#':'}"
          echo "Running ./gradlew :$M:assembleDebug"
          ./gradlew --no-daemon :$M:assembleDebug

      - name: Locate produced debug APK(s)
        id: find_apk
        run: |
          echo "Looking for debug APKs..."
          find . -type f -name "*debug*.apk" -print > apk_list.txt || true
          if [ -s apk_list.txt ]; then
            echo "::group::Found APKs"
            cat apk_list.txt
            echo "::endgroup::"
            APK_PATH=$(head -n 1 apk_list.txt)
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          else
            echo "No debug APK found!" >&2
            exit 1
          fi

      - name: Upload debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-debug-apk-${{ env.EXT_MODULE }}
          path: ${{ steps.find_apk.outputs.apk_path }}
