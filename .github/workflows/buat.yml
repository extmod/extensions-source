name: Build Mihon Tachiyomi Extension (Debug APK)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

env:
  # Ganti jika nama modul Gradle ekstensi Anda berbeda
  EXT_MODULE: "extension-mihon"
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

jobs:
  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK (cmdline tools + platform-tools)
        uses: android-actions/setup-android@v3
        with:
          # Ubah versi sesuai kebutuhan project Anda
          packages: "platform-tools build-tools;33.0.2 platforms;android-33"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure Gradle wrapper is executable
        run: chmod +x ./gradlew

      - name: Build debug APK (assembleDebug)
        id: gradle_build
        run: |
          echo "Running assembleDebug for module :${EXT_MODULE} ..."
          ./gradlew --no-daemon :${EXT_MODULE}:assembleDebug

      - name: Locate produced debug APK(s)
        id: find_apk
        run: |
          echo "Looking for debug APKs..."
          find . -type f -name "*debug*.apk" -print > apk_list.txt || true
          if [ -s apk_list.txt ]; then
            echo "::group::Found APKs"
            cat apk_list.txt
            echo "::endgroup::"
            APK_PATH=$(head -n 1 apk_list.txt)
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          else
            echo "No debug APK found!" >&2
            exit 1
          fi

      # Optional: decode keystore if you want to sign the debug APK (not required)
      - name: Decode signing keystore (optional)
        if: ${{ secrets.SIGNING_KEY_BASE64 != '' }}
        run: |
          echo "${{ secrets.SIGNING_KEY_BASE64 }}" | base64 --decode > mihon-debug-keystore.jks
          ls -l mihon-debug-keystore.jks

      - name: Sign debug APK with apksigner (optional)
        if: ${{ secrets.SIGNING_KEY_BASE64 != '' }}
        run: |
          APK="${{ steps.find_apk.outputs.apk_path }}"
          if [ -z "$APK" ]; then
            echo "APK path not found, aborting signing." >&2
            exit 1
          fi
          BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools | sort -V | tail -n1)
          APKSIGNER="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS/apksigner"
          if [ ! -x "$APKSIGNER" ]; then
            echo "apksigner not found at $APKSIGNER" >&2
            exit 1
          fi
          echo "Signing $APK with apksigner..."
          "$APKSIGNER" sign --ks mihon-debug-keystore.jks \
            --ks-key-alias "${{ secrets.SIGNING_KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.SIGNING_KEY_PASSWORD }}" \
            "$APK"
          echo "Verifying signature..."
          "$APKSIGNER" verify "$APK" || (echo "apksigner verify failed" >&2; exit 1)

      - name: Upload debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mihon-debug-apk
          path: ${{ steps.find_apk.outputs.apk_path }}
